plugins {
    id 'net.researchgate.release' version '2.3.5'
}
repositories {
    mavenCentral()
    maven {
        name 'gradle plugins'
        url 'https://plugins.gradle.org/m2/'
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}
apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'

compileGroovy.targetCompatibility = '1.8'
compileGroovy.sourceCompatibility = '1.8'

group = "com.techshroom"

dependencies {
    compile localGroovy()
    // we _would_ use jcabi-http here, but github defines all the extra deps we need desperately
    compile group: 'com.jcabi', name: 'jcabi-github', version: '0.28'
    compile group: 'net.ltgt.gradle', name: 'gradle-apt-plugin', version: '0.8'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.9.2'
}

/*

TAKEN FROM MAVENPLUGIN.GROOVY!
IF THAT'S UPDATED, THIS MIGHT NEED UPDATING TOO!

*/

// Add source/jd tasks
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

if (!project.hasProperty('ossrhPassword')) {
    project.ext.ossrhPassword = System.getenv('PASSWORD');
    println('Captured password from $PASSWORD')
}
// skip everything if data missing
if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword') && project.property('ossrhPassword')) {
    project.plugins.withId('net.researchgate.release') {
        project.afterReleaseBuild.dependsOn uploadArchives
    }
    println("[aversion-maven] username:password=${project.ossrhUsername}:REDACTED")
    ext.coord = 'TechShroom/Aversion'
    ext.doSigning = !Boolean.parseBoolean(System.getenv('TRAVIS'))
    project.apply plugin: 'maven'
    if (doSigning) {
        project.apply plugin: 'signing'
        project.signing {
            sign configurations.archives
        }
    } else {
        uploadArchives.onlyIf { project.version.endsWith('-SNAPSHOT') }
    }
    project.afterEvaluate {
            project.uploadArchives {
                repositories {
                    mavenDeployer {
                    }
                }
            }
        project.uploadArchives {
            repositories {
                mavenDeployer {
                    if (doSigning) {
                        beforeDeployment { deployment -> signing.signPom(deployment) }
                    }
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: project.ossrhUsername, password: project.ossrhPassword)
                    }
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: project.ossrhUsername, password: project.ossrhPassword)
                    }

                    pom.project {
                        name project.name
                        packaging 'jar'
                        description 'Common Gradle Config for TechShroom'
                        url 'https://github.com' + project.coord

                        scm {
                            connection 'git://github.com' + project.coord
                            developerConnection 'git://github.com' + project.coord
                            url 'https://github.com' + project.coord
                        }

                        licenses {
                            license {
                                name 'The MIT License'
                                url "https://github.com${project.coord}/blob/master/LICENSE"
                            }
                        }

                        developers {
                            developer {
                                id 'kenzierocks'
                                name 'Kenzie Togami'
                                email 'ket1999@gmail.com'
                            }
                        }
                    }
                }
            }
        }
        if (doSigning) {
            uploadArchives {
                repositories {
                    mavenDeployer {
                    }
                }
            }
        }
    }
}
